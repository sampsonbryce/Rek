// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  employee: (where?: EmployeeWhereInput) => Promise<boolean>;
  employeeSchedule: (where?: EmployeeScheduleWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userSchedule: (where?: UserScheduleWhereInput) => Promise<boolean>;
  workingTime: (where?: WorkingTimeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  appointment: (where: AppointmentWhereUniqueInput) => Appointment;
  appointments: (
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AppointmentNode>;
  appointmentsConnection: (
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AppointmentConnection;
  employee: (where: EmployeeWhereUniqueInput) => Employee;
  employees: (
    args?: {
      where?: EmployeeWhereInput;
      orderBy?: EmployeeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EmployeeNode>;
  employeesConnection: (
    args?: {
      where?: EmployeeWhereInput;
      orderBy?: EmployeeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmployeeConnection;
  employeeSchedule: (
    where: EmployeeScheduleWhereUniqueInput
  ) => EmployeeSchedule;
  employeeSchedules: (
    args?: {
      where?: EmployeeScheduleWhereInput;
      orderBy?: EmployeeScheduleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EmployeeScheduleNode>;
  employeeSchedulesConnection: (
    args?: {
      where?: EmployeeScheduleWhereInput;
      orderBy?: EmployeeScheduleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmployeeScheduleConnection;
  roles: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RoleNode>;
  rolesConnection: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleConnection;
  service: (where: ServiceWhereUniqueInput) => Service;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ServiceNode>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  userSchedule: (where: UserScheduleWhereUniqueInput) => UserSchedule;
  userSchedules: (
    args?: {
      where?: UserScheduleWhereInput;
      orderBy?: UserScheduleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserScheduleNode>;
  userSchedulesConnection: (
    args?: {
      where?: UserScheduleWhereInput;
      orderBy?: UserScheduleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserScheduleConnection;
  workingTime: (where: WorkingTimeWhereUniqueInput) => WorkingTime;
  workingTimes: (
    args?: {
      where?: WorkingTimeWhereInput;
      orderBy?: WorkingTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WorkingTimeNode>;
  workingTimesConnection: (
    args?: {
      where?: WorkingTimeWhereInput;
      orderBy?: WorkingTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkingTimeConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => Appointment;
  updateAppointment: (
    args: { data: AppointmentUpdateInput; where: AppointmentWhereUniqueInput }
  ) => Appointment;
  updateManyAppointments: (
    args: { data: AppointmentUpdateInput; where?: AppointmentWhereInput }
  ) => BatchPayload;
  upsertAppointment: (
    args: {
      where: AppointmentWhereUniqueInput;
      create: AppointmentCreateInput;
      update: AppointmentUpdateInput;
    }
  ) => Appointment;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => Appointment;
  deleteManyAppointments: (where?: AppointmentWhereInput) => BatchPayload;
  createEmployee: (data: EmployeeCreateInput) => Employee;
  updateEmployee: (
    args: { data: EmployeeUpdateInput; where: EmployeeWhereUniqueInput }
  ) => Employee;
  updateManyEmployees: (
    args: { data: EmployeeUpdateInput; where?: EmployeeWhereInput }
  ) => BatchPayload;
  upsertEmployee: (
    args: {
      where: EmployeeWhereUniqueInput;
      create: EmployeeCreateInput;
      update: EmployeeUpdateInput;
    }
  ) => Employee;
  deleteEmployee: (where: EmployeeWhereUniqueInput) => Employee;
  deleteManyEmployees: (where?: EmployeeWhereInput) => BatchPayload;
  createEmployeeSchedule: (
    data: EmployeeScheduleCreateInput
  ) => EmployeeSchedule;
  updateEmployeeSchedule: (
    args: {
      data: EmployeeScheduleUpdateInput;
      where: EmployeeScheduleWhereUniqueInput;
    }
  ) => EmployeeSchedule;
  updateManyEmployeeSchedules: (
    args: {
      data: EmployeeScheduleUpdateInput;
      where?: EmployeeScheduleWhereInput;
    }
  ) => BatchPayload;
  upsertEmployeeSchedule: (
    args: {
      where: EmployeeScheduleWhereUniqueInput;
      create: EmployeeScheduleCreateInput;
      update: EmployeeScheduleUpdateInput;
    }
  ) => EmployeeSchedule;
  deleteEmployeeSchedule: (
    where: EmployeeScheduleWhereUniqueInput
  ) => EmployeeSchedule;
  deleteManyEmployeeSchedules: (
    where?: EmployeeScheduleWhereInput
  ) => BatchPayload;
  createRole: (data: RoleCreateInput) => Role;
  updateManyRoles: (
    args: { data: RoleUpdateInput; where?: RoleWhereInput }
  ) => BatchPayload;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayload;
  createService: (data: ServiceCreateInput) => Service;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => Service;
  updateManyServices: (
    args: { data: ServiceUpdateInput; where?: ServiceWhereInput }
  ) => BatchPayload;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => Service;
  deleteService: (where: ServiceWhereUniqueInput) => Service;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createUserSchedule: (data: UserScheduleCreateInput) => UserSchedule;
  updateUserSchedule: (
    args: { data: UserScheduleUpdateInput; where: UserScheduleWhereUniqueInput }
  ) => UserSchedule;
  updateManyUserSchedules: (
    args: { data: UserScheduleUpdateInput; where?: UserScheduleWhereInput }
  ) => BatchPayload;
  upsertUserSchedule: (
    args: {
      where: UserScheduleWhereUniqueInput;
      create: UserScheduleCreateInput;
      update: UserScheduleUpdateInput;
    }
  ) => UserSchedule;
  deleteUserSchedule: (where: UserScheduleWhereUniqueInput) => UserSchedule;
  deleteManyUserSchedules: (where?: UserScheduleWhereInput) => BatchPayload;
  createWorkingTime: (data: WorkingTimeCreateInput) => WorkingTime;
  updateWorkingTime: (
    args: { data: WorkingTimeUpdateInput; where: WorkingTimeWhereUniqueInput }
  ) => WorkingTime;
  updateManyWorkingTimes: (
    args: { data: WorkingTimeUpdateInput; where?: WorkingTimeWhereInput }
  ) => BatchPayload;
  upsertWorkingTime: (
    args: {
      where: WorkingTimeWhereUniqueInput;
      create: WorkingTimeCreateInput;
      update: WorkingTimeUpdateInput;
    }
  ) => WorkingTime;
  deleteWorkingTime: (where: WorkingTimeWhereUniqueInput) => WorkingTime;
  deleteManyWorkingTimes: (where?: WorkingTimeWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  employee: (
    where?: EmployeeSubscriptionWhereInput
  ) => EmployeeSubscriptionPayloadSubscription;
  employeeSchedule: (
    where?: EmployeeScheduleSubscriptionWhereInput
  ) => EmployeeScheduleSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userSchedule: (
    where?: UserScheduleSubscriptionWhereInput
  ) => UserScheduleSubscriptionPayloadSubscription;
  workingTime: (
    where?: WorkingTimeSubscriptionWhereInput
  ) => WorkingTimeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WorkingTimeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "female_title_ASC"
  | "female_title_DESC"
  | "male_title_ASC"
  | "male_title_DESC"
  | "time_blocks_ASC"
  | "time_blocks_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmployeeOrderByInput =
  | "employeeId_ASC"
  | "employeeId_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmployeeScheduleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleOrderByInput =
  | "admin_ASC"
  | "admin_DESC"
  | "employee_ASC"
  | "employee_DESC"
  | "user_ASC"
  | "user_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserScheduleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserScheduleCreateOneInput {
  create?: UserScheduleCreateInput;
  connect?: UserScheduleWhereUniqueInput;
}

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EmployeeScheduleUpsertNestedInput {
  update: EmployeeScheduleUpdateDataInput;
  create: EmployeeScheduleCreateInput;
}

export interface UserScheduleUpdateOneInput {
  create?: UserScheduleCreateInput;
  update?: UserScheduleUpdateDataInput;
  upsert?: UserScheduleUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserScheduleWhereUniqueInput;
}

export interface WorkingTimeUpsertWithWhereUniqueNestedInput {
  where: WorkingTimeWhereUniqueInput;
  update: WorkingTimeUpdateDataInput;
  create: WorkingTimeCreateInput;
}

export interface WorkingTimeCreateManyInput {
  create?: WorkingTimeCreateInput[] | WorkingTimeCreateInput;
  connect?: WorkingTimeWhereUniqueInput[] | WorkingTimeWhereUniqueInput;
}

export interface WorkingTimeUpdateDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface WorkingTimeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkingTimeWhereInput;
  AND?: WorkingTimeSubscriptionWhereInput[] | WorkingTimeSubscriptionWhereInput;
  OR?: WorkingTimeSubscriptionWhereInput[] | WorkingTimeSubscriptionWhereInput;
  NOT?: WorkingTimeSubscriptionWhereInput[] | WorkingTimeSubscriptionWhereInput;
}

export type UserScheduleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WorkingTimeUpdateWithWhereUniqueNestedInput {
  where: WorkingTimeWhereUniqueInput;
  data: WorkingTimeUpdateDataInput;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleWhereInput;
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  NOT?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
}

export interface WorkingTimeUpdateManyInput {
  create?: WorkingTimeCreateInput[] | WorkingTimeCreateInput;
  update?:
    | WorkingTimeUpdateWithWhereUniqueNestedInput[]
    | WorkingTimeUpdateWithWhereUniqueNestedInput;
  upsert?:
    | WorkingTimeUpsertWithWhereUniqueNestedInput[]
    | WorkingTimeUpsertWithWhereUniqueNestedInput;
  delete?: WorkingTimeWhereUniqueInput[] | WorkingTimeWhereUniqueInput;
  connect?: WorkingTimeWhereUniqueInput[] | WorkingTimeWhereUniqueInput;
  disconnect?: WorkingTimeWhereUniqueInput[] | WorkingTimeWhereUniqueInput;
}

export interface EmployeeScheduleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmployeeScheduleWhereInput;
  AND?:
    | EmployeeScheduleSubscriptionWhereInput[]
    | EmployeeScheduleSubscriptionWhereInput;
  OR?:
    | EmployeeScheduleSubscriptionWhereInput[]
    | EmployeeScheduleSubscriptionWhereInput;
  NOT?:
    | EmployeeScheduleSubscriptionWhereInput[]
    | EmployeeScheduleSubscriptionWhereInput;
}

export interface EmployeeScheduleUpdateDataInput {
  workingTimes?: WorkingTimeUpdateManyInput;
  appointments?: AppointmentUpdateManyInput;
}

export interface ServiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  female_title?: String;
  female_title_not?: String;
  female_title_in?: String[] | String;
  female_title_not_in?: String[] | String;
  female_title_lt?: String;
  female_title_lte?: String;
  female_title_gt?: String;
  female_title_gte?: String;
  female_title_contains?: String;
  female_title_not_contains?: String;
  female_title_starts_with?: String;
  female_title_not_starts_with?: String;
  female_title_ends_with?: String;
  female_title_not_ends_with?: String;
  male_title?: String;
  male_title_not?: String;
  male_title_in?: String[] | String;
  male_title_not_in?: String[] | String;
  male_title_lt?: String;
  male_title_lte?: String;
  male_title_gt?: String;
  male_title_gte?: String;
  male_title_contains?: String;
  male_title_not_contains?: String;
  male_title_starts_with?: String;
  male_title_not_starts_with?: String;
  male_title_ends_with?: String;
  male_title_not_ends_with?: String;
  time_blocks?: Int;
  time_blocks_not?: Int;
  time_blocks_in?: Int[] | Int;
  time_blocks_not_in?: Int[] | Int;
  time_blocks_lt?: Int;
  time_blocks_lte?: Int;
  time_blocks_gt?: Int;
  time_blocks_gte?: Int;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export interface EmployeeScheduleUpdateOneRequiredInput {
  create?: EmployeeScheduleCreateInput;
  update?: EmployeeScheduleUpdateDataInput;
  upsert?: EmployeeScheduleUpsertNestedInput;
  connect?: EmployeeScheduleWhereUniqueInput;
}

export interface WorkingTimeUpdateInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export type WorkingTimeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  roles?: RoleWhereInput;
  userSchedule?: UserScheduleWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScheduleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  appointments_every?: AppointmentWhereInput;
  appointments_some?: AppointmentWhereInput;
  appointments_none?: AppointmentWhereInput;
  AND?: UserScheduleWhereInput[] | UserScheduleWhereInput;
  OR?: UserScheduleWhereInput[] | UserScheduleWhereInput;
  NOT?: UserScheduleWhereInput[] | UserScheduleWhereInput;
}

export interface UserScheduleUpsertNestedInput {
  update: UserScheduleUpdateDataInput;
  create: UserScheduleCreateInput;
}

export interface UserScheduleUpdateInput {
  appointments?: AppointmentUpdateManyInput;
}

export interface AppointmentUpsertWithWhereUniqueNestedInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateDataInput;
  create: AppointmentCreateInput;
}

export interface ServiceUpdateInput {
  name?: String;
  female_title?: String;
  male_title?: String;
  time_blocks?: Int;
}

export type EmployeeScheduleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutRolesInput {
  create?: UserCreateWithoutRolesInput;
  update?: UserUpdateWithoutRolesDataInput;
  upsert?: UserUpsertWithoutRolesInput;
  connect?: UserWhereUniqueInput;
}

export interface AppointmentCreateInput {
  start: DateTimeInput;
  end: DateTimeInput;
}

export interface UserCreateWithoutRolesInput {
  name: String;
  email: String;
  password: String;
  userSchedule?: UserScheduleCreateOneInput;
}

export interface AppointmentUpdateInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface RoleCreateInput {
  owner: UserCreateOneWithoutRolesInput;
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface AppointmentUpdateDataInput {
  start?: DateTimeInput;
  end?: DateTimeInput;
}

export interface ServiceUpsertWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface AppointmentUpdateWithWhereUniqueNestedInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateDataInput;
}

export interface ServiceUpdateDataInput {
  name?: String;
  female_title?: String;
  male_title?: String;
  time_blocks?: Int;
}

export interface EmployeeCreateInput {
  employeeId: ID_Input;
  user: UserCreateOneInput;
  schedule: EmployeeScheduleCreateOneInput;
  services?: ServiceCreateManyInput;
}

export interface ServiceUpdateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  update?:
    | ServiceUpdateWithWhereUniqueNestedInput[]
    | ServiceUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ServiceUpsertWithWhereUniqueNestedInput[]
    | ServiceUpsertWithWhereUniqueNestedInput;
  delete?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  disconnect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface AppointmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: AppointmentWhereInput[] | AppointmentWhereInput;
  OR?: AppointmentWhereInput[] | AppointmentWhereInput;
  NOT?: AppointmentWhereInput[] | AppointmentWhereInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  roles: RoleCreateOneWithoutOwnerInput;
  userSchedule?: UserScheduleCreateOneInput;
}

export interface UserScheduleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserScheduleWhereInput;
  AND?:
    | UserScheduleSubscriptionWhereInput[]
    | UserScheduleSubscriptionWhereInput;
  OR?:
    | UserScheduleSubscriptionWhereInput[]
    | UserScheduleSubscriptionWhereInput;
  NOT?:
    | UserScheduleSubscriptionWhereInput[]
    | UserScheduleSubscriptionWhereInput;
}

export interface RoleCreateOneWithoutOwnerInput {
  create?: RoleCreateWithoutOwnerInput;
}

export interface WorkingTimeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  end?: DateTimeInput;
  end_not?: DateTimeInput;
  end_in?: DateTimeInput[] | DateTimeInput;
  end_not_in?: DateTimeInput[] | DateTimeInput;
  end_lt?: DateTimeInput;
  end_lte?: DateTimeInput;
  end_gt?: DateTimeInput;
  end_gte?: DateTimeInput;
  AND?: WorkingTimeWhereInput[] | WorkingTimeWhereInput;
  OR?: WorkingTimeWhereInput[] | WorkingTimeWhereInput;
  NOT?: WorkingTimeWhereInput[] | WorkingTimeWhereInput;
}

export interface RoleCreateWithoutOwnerInput {
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppointmentWhereInput;
  AND?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  OR?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  NOT?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
}

export interface AppointmentUpdateManyInput {
  create?: AppointmentCreateInput[] | AppointmentCreateInput;
  update?:
    | AppointmentUpdateWithWhereUniqueNestedInput[]
    | AppointmentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AppointmentUpsertWithWhereUniqueNestedInput[]
    | AppointmentUpsertWithWhereUniqueNestedInput;
  delete?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  disconnect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface RoleWhereInput {
  owner?: UserWhereInput;
  admin?: Boolean;
  admin_not?: Boolean;
  employee?: Boolean;
  employee_not?: Boolean;
  user?: Boolean;
  user_not?: Boolean;
  AND?: RoleWhereInput[] | RoleWhereInput;
  OR?: RoleWhereInput[] | RoleWhereInput;
  NOT?: RoleWhereInput[] | RoleWhereInput;
}

export interface UserScheduleCreateInput {
  appointments?: AppointmentCreateManyInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  roles?: RoleUpdateOneRequiredWithoutOwnerInput;
  userSchedule?: UserScheduleUpdateOneInput;
}

export interface AppointmentCreateManyInput {
  create?: AppointmentCreateInput[] | AppointmentCreateInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface UserUpdateWithoutRolesDataInput {
  name?: String;
  email?: String;
  password?: String;
  userSchedule?: UserScheduleUpdateOneInput;
}

export interface EmployeeScheduleCreateOneInput {
  create?: EmployeeScheduleCreateInput;
  connect?: EmployeeScheduleWhereUniqueInput;
}

export interface UserCreateOneWithoutRolesInput {
  create?: UserCreateWithoutRolesInput;
  connect?: UserWhereUniqueInput;
}

export interface EmployeeScheduleCreateInput {
  workingTimes?: WorkingTimeCreateManyInput;
  appointments?: AppointmentCreateManyInput;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserScheduleUpdateDataInput {
  appointments?: AppointmentUpdateManyInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface WorkingTimeCreateInput {
  start: DateTimeInput;
  end: DateTimeInput;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface ServiceCreateManyInput {
  create?: ServiceCreateInput[] | ServiceCreateInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface EmployeeWhereInput {
  employeeId?: ID_Input;
  employeeId_not?: ID_Input;
  employeeId_in?: ID_Input[] | ID_Input;
  employeeId_not_in?: ID_Input[] | ID_Input;
  employeeId_lt?: ID_Input;
  employeeId_lte?: ID_Input;
  employeeId_gt?: ID_Input;
  employeeId_gte?: ID_Input;
  employeeId_contains?: ID_Input;
  employeeId_not_contains?: ID_Input;
  employeeId_starts_with?: ID_Input;
  employeeId_not_starts_with?: ID_Input;
  employeeId_ends_with?: ID_Input;
  employeeId_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  schedule?: EmployeeScheduleWhereInput;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  AND?: EmployeeWhereInput[] | EmployeeWhereInput;
  OR?: EmployeeWhereInput[] | EmployeeWhereInput;
  NOT?: EmployeeWhereInput[] | EmployeeWhereInput;
}

export interface ServiceCreateInput {
  name: String;
  female_title: String;
  male_title: String;
  time_blocks?: Int;
}

export interface UserUpsertWithoutRolesInput {
  update: UserUpdateWithoutRolesDataInput;
  create: UserCreateWithoutRolesInput;
}

export interface EmployeeUpdateInput {
  employeeId?: ID_Input;
  user?: UserUpdateOneRequiredInput;
  schedule?: EmployeeScheduleUpdateOneRequiredInput;
  services?: ServiceUpdateManyInput;
}

export interface EmployeeScheduleUpdateInput {
  workingTimes?: WorkingTimeUpdateManyInput;
  appointments?: AppointmentUpdateManyInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export type EmployeeWhereUniqueInput = AtLeastOne<{
  employeeId: ID_Input;
}>;

export interface RoleUpsertWithoutOwnerInput {
  update: RoleUpdateWithoutOwnerDataInput;
  create: RoleCreateWithoutOwnerInput;
}

export interface RoleUpdateWithoutOwnerDataInput {
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface RoleUpdateOneRequiredWithoutOwnerInput {
  create?: RoleCreateWithoutOwnerInput;
  update?: RoleUpdateWithoutOwnerDataInput;
  upsert?: RoleUpsertWithoutOwnerInput;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  password?: String;
  roles?: RoleUpdateOneRequiredWithoutOwnerInput;
  userSchedule?: UserScheduleUpdateOneInput;
}

export interface EmployeeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmployeeWhereInput;
  AND?: EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput;
  OR?: EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput;
  NOT?: EmployeeSubscriptionWhereInput[] | EmployeeSubscriptionWhereInput;
}

export interface ServiceUpdateWithWhereUniqueNestedInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateDataInput;
}

export interface RoleUpdateInput {
  owner?: UserUpdateOneRequiredWithoutRolesInput;
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface EmployeeScheduleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  workingTimes_every?: WorkingTimeWhereInput;
  workingTimes_some?: WorkingTimeWhereInput;
  workingTimes_none?: WorkingTimeWhereInput;
  appointments_every?: AppointmentWhereInput;
  appointments_some?: AppointmentWhereInput;
  appointments_none?: AppointmentWhereInput;
  AND?: EmployeeScheduleWhereInput[] | EmployeeScheduleWhereInput;
  OR?: EmployeeScheduleWhereInput[] | EmployeeScheduleWhereInput;
  NOT?: EmployeeScheduleWhereInput[] | EmployeeScheduleWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WorkingTimePreviousValuesNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface WorkingTimePreviousValues
  extends Promise<WorkingTimePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface WorkingTimePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkingTimePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EmployeeConnectionNode {}

export interface EmployeeConnection
  extends Promise<EmployeeConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<EmployeeEdgeNode>>() => T;
  aggregate: <T = AggregateEmployee>() => T;
}

export interface EmployeeConnectionSubscription
  extends Promise<AsyncIterator<EmployeeConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeSubscription>() => T;
}

export interface AppointmentEdgeNode {
  cursor: String;
}

export interface AppointmentEdge
  extends Promise<AppointmentEdgeNode>,
    Fragmentable {
  node: <T = Appointment>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdgeNode>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentConnectionNode {}

export interface AppointmentConnection
  extends Promise<AppointmentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<AppointmentEdgeNode>>() => T;
  aggregate: <T = AggregateAppointment>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface AggregateAppointmentNode {
  count: Int;
}

export interface AggregateAppointment
  extends Promise<AggregateAppointmentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointmentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceNode {
  id: ID_Output;
  name: String;
  female_title: String;
  male_title: String;
  time_blocks: Int;
}

export interface Service extends Promise<ServiceNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  female_title: () => Promise<String>;
  male_title: () => Promise<String>;
  time_blocks: () => Promise<Int>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<ServiceNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  female_title: () => Promise<AsyncIterator<String>>;
  male_title: () => Promise<AsyncIterator<String>>;
  time_blocks: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateWorkingTimeNode {
  count: Int;
}

export interface AggregateWorkingTime
  extends Promise<AggregateWorkingTimeNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkingTimeSubscription
  extends Promise<AsyncIterator<AggregateWorkingTimeNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WorkingTimeConnectionNode {}

export interface WorkingTimeConnection
  extends Promise<WorkingTimeConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<WorkingTimeEdgeNode>>() => T;
  aggregate: <T = AggregateWorkingTime>() => T;
}

export interface WorkingTimeConnectionSubscription
  extends Promise<AsyncIterator<WorkingTimeConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkingTimeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkingTimeSubscription>() => T;
}

export interface AppointmentNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface Appointment extends Promise<AppointmentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<AppointmentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserScheduleEdgeNode {
  cursor: String;
}

export interface UserScheduleEdge
  extends Promise<UserScheduleEdgeNode>,
    Fragmentable {
  node: <T = UserSchedule>() => T;
  cursor: () => Promise<String>;
}

export interface UserScheduleEdgeSubscription
  extends Promise<AsyncIterator<UserScheduleEdgeNode>>,
    Fragmentable {
  node: <T = UserScheduleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserScheduleNode {
  count: Int;
}

export interface AggregateUserSchedule
  extends Promise<AggregateUserScheduleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserScheduleSubscription
  extends Promise<AsyncIterator<AggregateUserScheduleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  roles: <T = Role>() => T;
  userSchedule: <T = UserSchedule>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: <T = RoleSubscription>() => T;
  userSchedule: <T = UserScheduleSubscription>() => T;
}

export interface UserScheduleConnectionNode {}

export interface UserScheduleConnection
  extends Promise<UserScheduleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserScheduleEdgeNode>>() => T;
  aggregate: <T = AggregateUserSchedule>() => T;
}

export interface UserScheduleConnectionSubscription
  extends Promise<AsyncIterator<UserScheduleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserScheduleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserScheduleSubscription>() => T;
}

export interface AppointmentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AppointmentSubscriptionPayload
  extends Promise<AppointmentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Appointment>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValues>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AppointmentPreviousValuesNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface AppointmentPreviousValues
  extends Promise<AppointmentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ServiceEdgeNode {
  cursor: String;
}

export interface ServiceEdge extends Promise<ServiceEdgeNode>, Fragmentable {
  node: <T = Service>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdgeNode>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WorkingTimeNode {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface WorkingTime extends Promise<WorkingTimeNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface WorkingTimeSubscription
  extends Promise<AsyncIterator<WorkingTimeNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRoleNode {
  count: Int;
}

export interface AggregateRole
  extends Promise<AggregateRoleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRoleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EmployeeSubscriptionPayload
  extends Promise<EmployeeSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Employee>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeePreviousValues>() => T;
}

export interface EmployeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeePreviousValuesSubscription>() => T;
}

export interface RoleConnectionNode {}

export interface RoleConnection
  extends Promise<RoleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RoleEdgeNode>>() => T;
  aggregate: <T = AggregateRole>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface EmployeePreviousValuesNode {
  employeeId: ID_Output;
}

export interface EmployeePreviousValues
  extends Promise<EmployeePreviousValuesNode>,
    Fragmentable {
  employeeId: () => Promise<ID_Output>;
}

export interface EmployeePreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeePreviousValuesNode>>,
    Fragmentable {
  employeeId: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateEmployeeScheduleNode {
  count: Int;
}

export interface AggregateEmployeeSchedule
  extends Promise<AggregateEmployeeScheduleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeScheduleSubscription
  extends Promise<AsyncIterator<AggregateEmployeeScheduleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserScheduleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserScheduleSubscriptionPayload
  extends Promise<UserScheduleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserSchedule>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserSchedulePreviousValues>() => T;
}

export interface UserScheduleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserScheduleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserScheduleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserSchedulePreviousValuesSubscription>() => T;
}

export interface EmployeeScheduleConnectionNode {}

export interface EmployeeScheduleConnection
  extends Promise<EmployeeScheduleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<EmployeeScheduleEdgeNode>>() => T;
  aggregate: <T = AggregateEmployeeSchedule>() => T;
}

export interface EmployeeScheduleConnectionSubscription
  extends Promise<AsyncIterator<EmployeeScheduleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeScheduleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeScheduleSubscription>() => T;
}

export interface EmployeeScheduleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EmployeeScheduleSubscriptionPayload
  extends Promise<EmployeeScheduleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeeSchedule>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmployeeSchedulePreviousValues>() => T;
}

export interface EmployeeScheduleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeScheduleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeScheduleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmployeeSchedulePreviousValuesSubscription>() => T;
}

export interface AggregateEmployeeNode {
  count: Int;
}

export interface AggregateEmployee
  extends Promise<AggregateEmployeeNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeSubscription
  extends Promise<AsyncIterator<AggregateEmployeeNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeSchedulePreviousValuesNode {
  id: ID_Output;
}

export interface EmployeeSchedulePreviousValues
  extends Promise<EmployeeSchedulePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface EmployeeSchedulePreviousValuesSubscription
  extends Promise<AsyncIterator<EmployeeSchedulePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSchedulePreviousValuesNode {
  id: ID_Output;
}

export interface UserSchedulePreviousValues
  extends Promise<UserSchedulePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserSchedulePreviousValuesSubscription
  extends Promise<AsyncIterator<UserSchedulePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface EmployeeScheduleNode {
  id: ID_Output;
}

export interface EmployeeSchedule
  extends Promise<EmployeeScheduleNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workingTimes: <T = FragmentableArray<WorkingTimeNode>>(
    args?: {
      where?: WorkingTimeWhereInput;
      orderBy?: WorkingTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  appointments: <T = FragmentableArray<AppointmentNode>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EmployeeScheduleSubscription
  extends Promise<AsyncIterator<EmployeeScheduleNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  workingTimes: <T = Promise<AsyncIterator<WorkingTimeSubscription>>>(
    args?: {
      where?: WorkingTimeWhereInput;
      orderBy?: WorkingTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkingTimeEdgeNode {
  cursor: String;
}

export interface WorkingTimeEdge
  extends Promise<WorkingTimeEdgeNode>,
    Fragmentable {
  node: <T = WorkingTime>() => T;
  cursor: () => Promise<String>;
}

export interface WorkingTimeEdgeSubscription
  extends Promise<AsyncIterator<WorkingTimeEdgeNode>>,
    Fragmentable {
  node: <T = WorkingTimeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoleSubscriptionPayload
  extends Promise<RoleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Role>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValues>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface AggregateServiceNode {
  count: Int;
}

export interface AggregateService
  extends Promise<AggregateServiceNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateServiceNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RolePreviousValuesNode {
  admin: Boolean;
  employee: Boolean;
  user: Boolean;
}

export interface RolePreviousValues
  extends Promise<RolePreviousValuesNode>,
    Fragmentable {
  admin: () => Promise<Boolean>;
  employee: () => Promise<Boolean>;
  user: () => Promise<Boolean>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValuesNode>>,
    Fragmentable {
  admin: () => Promise<AsyncIterator<Boolean>>;
  employee: () => Promise<AsyncIterator<Boolean>>;
  user: () => Promise<AsyncIterator<Boolean>>;
}

export interface RoleEdgeNode {
  cursor: String;
}

export interface RoleEdge extends Promise<RoleEdgeNode>, Fragmentable {
  node: <T = Role>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdgeNode>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserScheduleNode {
  id: ID_Output;
}

export interface UserSchedule extends Promise<UserScheduleNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  appointments: <T = FragmentableArray<AppointmentNode>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserScheduleSubscription
  extends Promise<AsyncIterator<UserScheduleNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EmployeeScheduleEdgeNode {
  cursor: String;
}

export interface EmployeeScheduleEdge
  extends Promise<EmployeeScheduleEdgeNode>,
    Fragmentable {
  node: <T = EmployeeSchedule>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeScheduleEdgeSubscription
  extends Promise<AsyncIterator<EmployeeScheduleEdgeNode>>,
    Fragmentable {
  node: <T = EmployeeScheduleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ServiceSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ServiceSubscriptionPayload
  extends Promise<ServiceSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Service>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValues>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface EmployeeEdgeNode {
  cursor: String;
}

export interface EmployeeEdge extends Promise<EmployeeEdgeNode>, Fragmentable {
  node: <T = Employee>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeEdgeSubscription
  extends Promise<AsyncIterator<EmployeeEdgeNode>>,
    Fragmentable {
  node: <T = EmployeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface RoleNode {
  admin: Boolean;
  employee: Boolean;
  user: Boolean;
}

export interface Role extends Promise<RoleNode>, Fragmentable {
  owner: <T = User>() => T;
  admin: () => Promise<Boolean>;
  employee: () => Promise<Boolean>;
  user: () => Promise<Boolean>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<RoleNode>>,
    Fragmentable {
  owner: <T = UserSubscription>() => T;
  admin: () => Promise<AsyncIterator<Boolean>>;
  employee: () => Promise<AsyncIterator<Boolean>>;
  user: () => Promise<AsyncIterator<Boolean>>;
}

export interface ServicePreviousValuesNode {
  id: ID_Output;
  name: String;
  female_title: String;
  male_title: String;
  time_blocks: Int;
}

export interface ServicePreviousValues
  extends Promise<ServicePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  female_title: () => Promise<String>;
  male_title: () => Promise<String>;
  time_blocks: () => Promise<Int>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  female_title: () => Promise<AsyncIterator<String>>;
  male_title: () => Promise<AsyncIterator<String>>;
  time_blocks: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceConnectionNode {}

export interface ServiceConnection
  extends Promise<ServiceConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ServiceEdgeNode>>() => T;
  aggregate: <T = AggregateService>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EmployeeNode {
  employeeId: ID_Output;
}

export interface Employee extends Promise<EmployeeNode>, Fragmentable {
  employeeId: () => Promise<ID_Output>;
  user: <T = User>() => T;
  schedule: <T = EmployeeSchedule>() => T;
  services: <T = FragmentableArray<ServiceNode>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EmployeeSubscription
  extends Promise<AsyncIterator<EmployeeNode>>,
    Fragmentable {
  employeeId: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  schedule: <T = EmployeeScheduleSubscription>() => T;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WorkingTimeSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WorkingTimeSubscriptionPayload
  extends Promise<WorkingTimeSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkingTime>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkingTimePreviousValues>() => T;
}

export interface WorkingTimeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkingTimeSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkingTimeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkingTimePreviousValuesSubscription>() => T;
}

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Type Defs
 */

export const prisma: Prisma;
