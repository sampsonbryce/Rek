// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  employeeToService: (where?: EmployeeToServiceWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  employeeToServices: (
    args?: {
      where?: EmployeeToServiceWhereInput;
      orderBy?: EmployeeToServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EmployeeToServiceNode>;
  employeeToServicesConnection: (
    args?: {
      where?: EmployeeToServiceWhereInput;
      orderBy?: EmployeeToServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EmployeeToServiceConnection;
  roles: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RoleNode>;
  rolesConnection: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleConnection;
  service: (where: ServiceWhereUniqueInput) => Service;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ServiceNode>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmployeeToService: (
    data: EmployeeToServiceCreateInput
  ) => EmployeeToService;
  updateManyEmployeeToServices: (
    args: {
      data: EmployeeToServiceUpdateInput;
      where?: EmployeeToServiceWhereInput;
    }
  ) => BatchPayload;
  deleteManyEmployeeToServices: (
    where?: EmployeeToServiceWhereInput
  ) => BatchPayload;
  createRole: (data: RoleCreateInput) => Role;
  updateManyRoles: (
    args: { data: RoleUpdateInput; where?: RoleWhereInput }
  ) => BatchPayload;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayload;
  createService: (data: ServiceCreateInput) => Service;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => Service;
  updateManyServices: (
    args: { data: ServiceUpdateInput; where?: ServiceWhereInput }
  ) => BatchPayload;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => Service;
  deleteService: (where: ServiceWhereUniqueInput) => Service;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  employeeToService: (
    where?: EmployeeToServiceSubscriptionWhereInput
  ) => EmployeeToServiceSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EmployeeToServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleOrderByInput =
  | "admin_ASC"
  | "admin_DESC"
  | "employee_ASC"
  | "employee_DESC"
  | "user_ASC"
  | "user_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "female_title_ASC"
  | "female_title_DESC"
  | "male_title_ASC"
  | "male_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface RoleCreateWithoutOwnerInput {
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface EmployeeToServiceWhereInput {
  employee?: UserWhereInput;
  service?: ServiceWhereInput;
  AND?: EmployeeToServiceWhereInput[] | EmployeeToServiceWhereInput;
  OR?: EmployeeToServiceWhereInput[] | EmployeeToServiceWhereInput;
  NOT?: EmployeeToServiceWhereInput[] | EmployeeToServiceWhereInput;
}

export interface EmployeeToServiceUpdateInput {
  employee?: UserUpdateOneRequiredInput;
  service?: ServiceUpdateOneRequiredInput;
}

export interface ServiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  female_title?: String;
  female_title_not?: String;
  female_title_in?: String[] | String;
  female_title_not_in?: String[] | String;
  female_title_lt?: String;
  female_title_lte?: String;
  female_title_gt?: String;
  female_title_gte?: String;
  female_title_contains?: String;
  female_title_not_contains?: String;
  female_title_starts_with?: String;
  female_title_not_starts_with?: String;
  female_title_ends_with?: String;
  female_title_not_ends_with?: String;
  male_title?: String;
  male_title_not?: String;
  male_title_in?: String[] | String;
  male_title_not_in?: String[] | String;
  male_title_lt?: String;
  male_title_lte?: String;
  male_title_gt?: String;
  male_title_gte?: String;
  male_title_contains?: String;
  male_title_not_contains?: String;
  male_title_starts_with?: String;
  male_title_not_starts_with?: String;
  male_title_ends_with?: String;
  male_title_not_ends_with?: String;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface RoleUpdateOneRequiredWithoutOwnerInput {
  create?: RoleCreateWithoutOwnerInput;
  update?: RoleUpdateWithoutOwnerDataInput;
  upsert?: RoleUpsertWithoutOwnerInput;
}

export interface ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface ServiceUpdateDataInput {
  name?: String;
  female_title?: String;
  male_title?: String;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface ServiceUpdateOneRequiredInput {
  create?: ServiceCreateInput;
  update?: ServiceUpdateDataInput;
  upsert?: ServiceUpsertNestedInput;
  connect?: ServiceWhereUniqueInput;
}

export interface EmployeeToServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EmployeeToServiceWhereInput;
  AND?:
    | EmployeeToServiceSubscriptionWhereInput[]
    | EmployeeToServiceSubscriptionWhereInput;
  OR?:
    | EmployeeToServiceSubscriptionWhereInput[]
    | EmployeeToServiceSubscriptionWhereInput;
  NOT?:
    | EmployeeToServiceSubscriptionWhereInput[]
    | EmployeeToServiceSubscriptionWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ServiceUpdateInput {
  name?: String;
  female_title?: String;
  male_title?: String;
}

export interface UserUpdateWithoutRolesDataInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface RoleUpdateInput {
  owner?: UserUpdateOneRequiredWithoutRolesInput;
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface EmployeeToServiceCreateInput {
  employee: UserCreateOneInput;
  service: ServiceCreateOneInput;
}

export interface RoleWhereInput {
  owner?: UserWhereInput;
  admin?: Boolean;
  admin_not?: Boolean;
  employee?: Boolean;
  employee_not?: Boolean;
  user?: Boolean;
  user_not?: Boolean;
  AND?: RoleWhereInput[] | RoleWhereInput;
  OR?: RoleWhereInput[] | RoleWhereInput;
  NOT?: RoleWhereInput[] | RoleWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateOneWithoutRolesInput {
  create?: UserCreateWithoutRolesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  roles: RoleCreateOneWithoutOwnerInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface RoleCreateOneWithoutOwnerInput {
  create?: RoleCreateWithoutOwnerInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  roles?: RoleUpdateOneRequiredWithoutOwnerInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  roles?: RoleWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneRequiredWithoutRolesInput {
  create?: UserCreateWithoutRolesInput;
  update?: UserUpdateWithoutRolesDataInput;
  upsert?: UserUpsertWithoutRolesInput;
  connect?: UserWhereUniqueInput;
}

export interface ServiceCreateOneInput {
  create?: ServiceCreateInput;
  connect?: ServiceWhereUniqueInput;
}

export interface UserCreateWithoutRolesInput {
  name: String;
  email: String;
  password: String;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  password?: String;
  roles?: RoleUpdateOneRequiredWithoutOwnerInput;
}

export interface RoleUpdateWithoutOwnerDataInput {
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export interface RoleUpsertWithoutOwnerInput {
  update: RoleUpdateWithoutOwnerDataInput;
  create: RoleCreateWithoutOwnerInput;
}

export interface ServiceCreateInput {
  name: String;
  female_title: String;
  male_title: String;
}

export interface RoleCreateInput {
  owner: UserCreateOneWithoutRolesInput;
  admin?: Boolean;
  employee?: Boolean;
  user?: Boolean;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface UserUpsertWithoutRolesInput {
  update: UserUpdateWithoutRolesDataInput;
  create: UserCreateWithoutRolesInput;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleWhereInput;
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  NOT?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface EmployeeToServiceNode {}

export interface EmployeeToService
  extends Promise<EmployeeToServiceNode>,
    Fragmentable {
  employee: <T = User>() => T;
  service: <T = Service>() => T;
}

export interface EmployeeToServiceSubscription
  extends Promise<AsyncIterator<EmployeeToServiceNode>>,
    Fragmentable {
  employee: <T = UserSubscription>() => T;
  service: <T = ServiceSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  roles: <T = Role>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: <T = RoleSubscription>() => T;
}

export interface AggregateEmployeeToServiceNode {
  count: Int;
}

export interface AggregateEmployeeToService
  extends Promise<AggregateEmployeeToServiceNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmployeeToServiceSubscription
  extends Promise<AsyncIterator<AggregateEmployeeToServiceNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeToServiceEdgeNode {
  cursor: String;
}

export interface EmployeeToServiceEdge
  extends Promise<EmployeeToServiceEdgeNode>,
    Fragmentable {
  node: <T = EmployeeToService>() => T;
  cursor: () => Promise<String>;
}

export interface EmployeeToServiceEdgeSubscription
  extends Promise<AsyncIterator<EmployeeToServiceEdgeNode>>,
    Fragmentable {
  node: <T = EmployeeToServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ServicePreviousValuesNode {
  id: ID_Output;
  name: String;
  female_title: String;
  male_title: String;
}

export interface ServicePreviousValues
  extends Promise<ServicePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  female_title: () => Promise<String>;
  male_title: () => Promise<String>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  female_title: () => Promise<AsyncIterator<String>>;
  male_title: () => Promise<AsyncIterator<String>>;
}

export interface ServiceSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ServiceSubscriptionPayload
  extends Promise<ServiceSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Service>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValues>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface ServiceEdgeNode {
  cursor: String;
}

export interface ServiceEdge extends Promise<ServiceEdgeNode>, Fragmentable {
  node: <T = Service>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdgeNode>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceNode {
  count: Int;
}

export interface AggregateService
  extends Promise<AggregateServiceNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateServiceNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmployeeToServiceSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EmployeeToServiceSubscriptionPayload
  extends Promise<EmployeeToServiceSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmployeeToService>() => T;
  updatedFields: () => Promise<String[]>;
}

export interface EmployeeToServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmployeeToServiceSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmployeeToServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregateRoleNode {
  count: Int;
}

export interface AggregateRole
  extends Promise<AggregateRoleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRoleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnectionNode {}

export interface RoleConnection
  extends Promise<RoleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RoleEdgeNode>>() => T;
  aggregate: <T = AggregateRole>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface ServiceNode {
  id: ID_Output;
  name: String;
  female_title: String;
  male_title: String;
}

export interface Service extends Promise<ServiceNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  female_title: () => Promise<String>;
  male_title: () => Promise<String>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<ServiceNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  female_title: () => Promise<AsyncIterator<String>>;
  male_title: () => Promise<AsyncIterator<String>>;
}

export interface RolePreviousValuesNode {
  admin: Boolean;
  employee: Boolean;
  user: Boolean;
}

export interface RolePreviousValues
  extends Promise<RolePreviousValuesNode>,
    Fragmentable {
  admin: () => Promise<Boolean>;
  employee: () => Promise<Boolean>;
  user: () => Promise<Boolean>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValuesNode>>,
    Fragmentable {
  admin: () => Promise<AsyncIterator<Boolean>>;
  employee: () => Promise<AsyncIterator<Boolean>>;
  user: () => Promise<AsyncIterator<Boolean>>;
}

export interface RoleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoleSubscriptionPayload
  extends Promise<RoleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Role>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValues>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface EmployeeToServiceConnectionNode {}

export interface EmployeeToServiceConnection
  extends Promise<EmployeeToServiceConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<EmployeeToServiceEdgeNode>>() => T;
  aggregate: <T = AggregateEmployeeToService>() => T;
}

export interface EmployeeToServiceConnectionSubscription
  extends Promise<AsyncIterator<EmployeeToServiceConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmployeeToServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmployeeToServiceSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface RoleEdgeNode {
  cursor: String;
}

export interface RoleEdge extends Promise<RoleEdgeNode>, Fragmentable {
  node: <T = Role>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdgeNode>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ServiceConnectionNode {}

export interface ServiceConnection
  extends Promise<ServiceConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ServiceEdgeNode>>() => T;
  aggregate: <T = AggregateService>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface RoleNode {
  admin: Boolean;
  employee: Boolean;
  user: Boolean;
}

export interface Role extends Promise<RoleNode>, Fragmentable {
  owner: <T = User>() => T;
  admin: () => Promise<Boolean>;
  employee: () => Promise<Boolean>;
  user: () => Promise<Boolean>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<RoleNode>>,
    Fragmentable {
  owner: <T = UserSubscription>() => T;
  admin: () => Promise<AsyncIterator<Boolean>>;
  employee: () => Promise<AsyncIterator<Boolean>>;
  user: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
